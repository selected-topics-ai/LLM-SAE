import argparse
import json

from openai import OpenAI
from dataclasses import dataclass


SYSTEM_PROMPT = ("You score texts generated by a language model based on the following criterion:\n{}.\n"
                 "You provide a score from 1 to 10.\n"
                 "The language model was given a prompt and generated the following text.\n"
                 "Evaluate the text based on the criterion. Output format should be JSON with the following fields: \"score\" (int)")

BEHAVIORAL_CRITERION = "The text contains discussion about a {}"
COHERENCE_CRITERION = "The text is coherent and the grammar is correct."

USER_PROMPT = "Message content\n\nPrompt:\n\nCompletion:\n\"\"\"\n{}\n\"\"\""

def behavioral_system_prompt(text: str) -> str:
    behavioral_prompt = BEHAVIORAL_CRITERION.format(text)
    return SYSTEM_PROMPT.format(behavioral_prompt)

def coherence_system_prompt() -> str:
    return SYSTEM_PROMPT.format(COHERENCE_CRITERION)

def user_prompt(text: str) -> str:
    return USER_PROMPT.format(text)


@dataclass
class JudgeScore:
    behavioral_score: int
    coherence_score: int


def get_score_value(client, system_prompt, user_prompt, model_name) -> int:

    response = client.chat.completions.create(
        model=model_name,
        messages=[
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": user_prompt},
        ],
        stream=False
    )

    content = response.choices[0].message.content.split("```json\n")[1].split("```")[0]
    content_json = json.loads(content)

    return content_json["score"]


def get_scores(behavioral_theme: str,
              model_answer: str,
              api_key: str="ollama",
              host: str="http://localhost:11434/v1",
              model: str="deepseek-r1:8b") -> JudgeScore:

    client = OpenAI(api_key=api_key, base_url=host)

    behavioral_score = get_score_value(client, behavioral_system_prompt(behavioral_theme), user_prompt(model_answer), model)
    coherence_score = get_score_value(client, coherence_system_prompt(), user_prompt(model_answer), model)

    return JudgeScore(
        behavioral_score=behavioral_score,
        coherence_score=coherence_score,
    )



if __name__ == "__main__":

    print(behavioral_system_prompt("cat"))

    argparser = argparse.ArgumentParser()
    argparser.add_argument("--api-key",
                           required=False,
                           type=str,
                           default="ollama")
    argparser.add_argument("--base_url",
                           required=False,
                           type=str,
                           default="http://localhost:11434/v1")

    args = argparser.parse_args()

    print(get_scores(
        behavioral_theme="cat",
        model_answer="I am a friendly, helpful, and knowledgeable AI assistant. I am not a person, but I am trained on a large amount of data, allowing me to answer your questions and complete your tasks.",
        api_key=args.api_key,
        host=args.base_url)
    )